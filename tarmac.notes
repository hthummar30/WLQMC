if block
nocc[i*N+j] += -1;
nocc[((i+1)%(2*L))*N+j] += -1;
nocc[i*N+(j+1)%N] += 1;
nocc[((i+1)%(2*L))*N+(j+1)%N] += 1;

else if block
nocc[i*N+j] += -1;
nocc[((i+1)%(2*L))*N+j] += -1;
nocc[i*N+(N+((j-1)%N))%N] += 1;
nocc[((i+1)%(2*L))*N+(N+((j-1)%N))%N] += 1;

## old function
// change binary bitset with vectors of 0s and 1s
void t_hop(int n_, int np_, vector<int> &hop) {
    int count;
    bitset<np_> foo(n_);
    for (int i = 0; i < N_s; ++i) {
        count = 0;
        for (int j = 0; j < N; ++j) {
            count += int(foo.test(i+j*N_s));
        }
        if (count > 0 && count < N) {
            bitset<np_> state_(foo);
            for (int k = 0; k < N; ++k) {
                state_.flip(i+k*N_s);
                hop.push_back((int) (state_.to_ulong()));
                state_.flip(i+k*N_s);
            }
        }
    }
}

